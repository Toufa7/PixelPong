// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// i want my user to have name username email token and can add friends block freinds delete friends and this user have a level and status onilne or offline
  model User {
    //User account
    id        String      @id @default(uuid()) @unique
    username  String?   @unique
    email     String?   @unique
    token     String?   @unique
    twofasecret String? @unique
    twofatoken String?
    profileImage String?
    twofa       Boolean? @default(false)
    stats     Stats[]  @relation("stats")
    status    UserStatus?
    authenticated Boolean @default(false)

  // game
  achievements Achievements[] @relation("achievements")
  matchhistory MatchHistory[] @relation("matchhistory")

  //relations
  friends   User [] @relation("friends")
  friendsby       User[] @relation("friends")
  blocked      User[]   @relation("block")
  blockedby      User[]   @relation("block")
  firstlogin Boolean @default(true)
  friendreqsent   Friendrequest[]   @relation("friendreqsent")
  friendreqreceived   Friendrequest[]   @relation("friendreqreceived")
  //chat
  dmsChat     Dmschat[]     @relation("DMsChat")
  RecieverDMs  Dmschat[] @relation("ReciverDMsChat")
  GroupChat   Groupchat[] @relation("GroupChat")
  MessageGB    MessageGB[] @relation("UGBMessage")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dmschat {
  id        String      @id @default(uuid()) @unique
  senderId  String
  sender    User     @relation("DMsChat", fields: [senderId], references: [id])
  receiverId String
  receiver  User      @relation("ReciverDMsChat", fields: [receiverId], references: [id])
  messageDMs String
  createdAt DateTime @default(now())
}

model Groupchat{
    id        String      @id @default(uuid()) @unique
    SenderId  String
    Sender    User     @relation("GroupChat", fields: [SenderId], references: [id])
    GroupType  GroupType
    Password String?  
    MessagesGB MessageGB[] @relation("GBMessage")
}
model MessageGB {
  id        String      @id @default(uuid()) @unique
  SenderId  String
  Sender    User     @relation("UGBMessage", fields: [SenderId], references: [id])
  Message String
  GroupChat Groupchat @relation("GBMessage", fields: [id], references: [id])
}

enum GroupType{
  PUBLIC
  PRIVATE
  PROTECTED
}




model Friendrequest{
  id        Int     @id @default(autoincrement())
  sender    User        @relation("friendreqsent", fields: [senderId], references: [id])
  senderId  String
  receiver  User        @relation("friendreqreceived", fields: [receiverId], references: [id])
  receiverId  String
  status    Status     @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum  Status {
  ACCEPTED
  PENDING
  DECLINED
}

enum  UserStatus {
  ONLINE
  OFFLINE
  AWAY
  BUSY
} 
model Stats{
  level    Int  @default(0)
  user     User     @relation("stats", fields: [userId], references: [id])
  userId   String     
  wins     Int  @default(0)
  loses    Int  @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}


model Achievements{
  name      String
  achievementType    Type
  user      User     @relation("achievements", fields: [userId], references: [id])
  userId    String     
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, achievementType])
}

enum Type {
  ADDFRIEND
  FIRSTWIN
  FIRSTLOSE
  FIRSTMATCH
  STRIKES
  LEVEL1
  LEVEL5
  LEVEL10
}

model MatchHistory {
  numberOfMatches        Int      @default(0)
  user      User     @relation("matchhistory", fields: [userId], references: [id])
  userId    String     
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}